// localStorage - специальный объект BOM, с помощью которого можно  долговременно хранить
// информацию на клиенте. Для каждого домена свое собственное хранилище.
// Для доступа к данным предоставляется удобный интерфейс для чтения и записи пар ключ-значение (строки).
// Общий размер памяти под localStorage обязательно ограничен браузером. Современные НЕ мобильные
// браузеры предоставляют до 10Мб под localStorage для каждого домена, мобильные обычно меньше.
// Доступен в рамках домена, на котором установлен
// Ограничен только общий размер хранимых данных
// Не имеет автоматической отправки на сервер
// Запись и чтение
// Запись - 1.метод setItem(), 2.непосредственно с помощью свойства объекта.
localStorage.setItem('lastname', 'Иванов');
// или как со свойством объекта
localStorage['lastname'] = "Петров";
// можно и без квадратных скобок
localStorage.lastname = 'Сидоров';
// Чтение
// Теперь даже после перезагрузки страницы или браузера целиком фамилию можно будет прочитать
// либо через метод getItem(), либо через свойство объекта:
let lastname = localStorage.getItem('lastname');
console.log(lastname); // "Сидоров"
// или через чтение свойства объекта
console.log(localStorage.lastname); //"Сидоров"
// У объекта localStorage есть свойство length - это общее количество ключей,
// которые определены в данный момент в localStorage.
// Удаление записей
// localStorage.clear() - полностью очищает текущее хранилище.
// Например, его нужно вызывать во время log out с сайта, чтобы удалить все связанные с пользователем данные.
// Кроме полной очистки хранилища, можно удалить конкретный ключ и связанные с ним значения
// с помощью removeItem() или с помощью оператора delete.
localStorage.removeItem('user');
delete localStorage.user;
// Работа с объектами
// В качестве значения в localStorage могут выступать только строки. Если же необходимо записать объект, то
// для этого необходимо использовать сериализацию/десериализацию с помощью
// JSON.stringify() и  JSON.parse() соответственно.
function saveUser(user) {
    localStorage.user = JSON.stringify(user); // => строка
}
function getUser() {
    return JSON.parse(localStorage.user); // => объект
}
// JSON.parse() с любыми некорректными данными приведет к исключению. Поэтому при чтении
// объектов из localStorage дучше всегда использовать try-catch:
function getUser() {
    try {
        return JSON.parse(localStorage.getItem('user'));
    } catch (e) {
        return null;
    }
}
// Переполнение
localStorage.bigdata = new Array(1e7).join('x')
// События на изменения localStorage
// Можно подписаться на событие, которое возникает во время изменения содержимого localStorage.
// Это событие с название storage у объекта window.
// Это событие не будет возникать на той же вкладке (или странице, если у браузера нет вкладок),
// где вносятся изменения, т.к. оно является способом для других вкладок на том же домене использовать
// хранилище для синхронизации любых внесенных изменений.
// 1). При изменении пользователем темы на сайте выполнилась строка скрипта:
localStorage.theme = "dark";
// 2). в другой вкладке сработал следующий код:
window.addEventListener('storage', (e) => {
    console.log(e.key, e.oldValue, e.newValue); // будет выведено: "theme", "dark", "light"
    document.body.classList = [e.newValue]; // 3). проставим класс темы для body
});

// document.cookie
// для проверки авторизации пользователей
// Куки - это пары строк ключ-значение, которые могут созраниться даже после закрытия браузера.
// Для индентификации конкретного пользователя сервер записывает в куки специальный идентификатор (строку или число),
// который определяет сессию и соответственно конкретного пользователя для сервера. А затем вместе с каждым запросом
// браузер отправляет на сервер куки автоматически.
// Установка
// Устанавливать куки можно либо с помощью JavaScript кода, либо со стороны сервера с помощью HTTP-заголовка Set-Cookie
Set-Cookie: sessionid=XXXyyyZZZ
// Для работы с куками силами JS в браузере существует специальный BOM-объект document.cookie
// Через него можно как устанавливать новые значения, так и читать существующие.
document.cookie = 'firstname=Иван';
document.cookie = 'lastname=Петров';
// Если значение содержит пробелы, точки с запятой или запятые, то его необходимо преобразовать с помощью encodeURIComponent():
document.cookie = 'user=' + encodeURIComponent("Иван Иванович Иванов; 1945 г.")';

function setCookie(name, value) {
    document.cookie = name + '=' + encodeURIComponent(value)
}
finction getCookie(name) {
    const cookies = document.cookie.split('; ');
    const result = cookies.gind((s) => s.startWith(name + '='));
    return result & decodeURIComponent(result.substr(name.length + 1)) : null
}
// получение значения куки по имени:
const getCookie = (name) => {
    const value = "; " + document.cookie;
    let parts = value.split("; " + name + '=');
    if (parts.length ===2) {
        return parte
            .pop()
            .split(";")
            .shift();
    }
}
// Различные опции для кук
document.cookie = 'name=value;
                   Expires=Mon, 01 May 2018 21:41:37 GMY;
                   Path=/api;
                   Domain=.mysite.com';
// - Expires - определяет время жизни куки. Если не указывать, то кука исчезнет после закрытия браузера;
// - Path - для каждого пути (и всех путей, начинающихся на этот путь) кука будет автоматически подставляться
// в запрос. Если не указано - значит берется текущий путь;
// - Domain - домен, на котором доступна кука. Можно указывать текущий домен или поддомен. Если не указано,
// то будет взят текущий домен.
// Если как в примере (с точкой в начале), то кука установлена для домена и всех поддоменов.
// Удаление куки
document.cookie = 'name=; Expires=Thu, 01 Jan 1970 00:00:00 GMT';
// Ограничения куки
// Все браузеры накладывают на куки ограничения по размеру, как на размер отдельной куки, так и на общее количество
// - имя и значение не должны превышать 4кб
// - на общее количество кук на домен имеет ограничение - не более 50. В некоторых браузерах еще меньше.
// Cookies
// - + могут быть установлены с сервера (заголовок Set-Cookie);
// - + могут быть недоступны на клиенте (опция HttpOnly);
// - + имеют настройку времени жизни (опция Expires);
// - +/- автоматически отправляются на сервер (в зависимости от опции Path);
// - - существенные ограничения на количество/размер одной куки/общий размер;
// - - неудобный интерфейс.

// localStorage
// - + ограничен только общий размер хранимых данных;
// - + удобный интерфейс;
// - +/- нет автоматической отправки на сервер;
// - + значения не могут быть установленны с сервера.

// sessionStorage
// - + обладает всеми свойствами localStorage, кроме времени жизни (до завершения работы вкладки или окна браузера).
// аналог сессионной куки.

// Кроссдоменные запросы, CORS, XHR.withCredentials
// Механизм CORS для кроссдоменных запросов
const invocation = new XMLHttpRequest();
const url = 'http://www.example.ru/public-data/';

function getData() {
    if (invocation) {
        invocation.open("GET", url, true);
        invocation.onraeadystatechange = hendler;
        invocation.send();
    }
}
// Cross-Origin Resource Sharing (CORS) - механизм, использующий дополнительные HTTP-заголовки, чтобы дать возможность
// веб-приложению, работающему на одном домене, получить доступ к выбранным ресурсам с сервера на другом источнике (домене).
// - отличается доменом, протоколом, портом